-- Creates a new, styled Terminal window and executes a command within it.
-- Placeholders: {{final_script_payload}}, {{escaped_device_label}}, {{aps_bg_color}}, {{aps_text_color}}

tell application "Terminal"
	activate
	set new_terminal_entity to missing value
	try
		set new_terminal_entity to do script "{{final_script_payload}}"
	on error errMsg
		log "AS: Error in @N 'do script': " & errMsg
	end try
	
	delay 0.3 
	set target_window to missing value
	
	try
		if new_terminal_entity is not missing value then
			set new_entity_class to class of new_terminal_entity
			if new_entity_class is tab then
				try
					set target_window to window of new_terminal_entity
				on error
					log "AS: Could not get window of tab directly for @N, using front window."
					if (count windows) > 0 then
						set target_window to front window
					end if
				end try
			else if new_entity_class is window then
				set target_window to new_terminal_entity
			else
				log "AS: Unexpected class for @N new_terminal_entity: " & (new_entity_class as text)
				if (count windows) > 0 then
					set target_window to front window
				end if
			end if
		else if (count of windows) > 0 then
			set target_window to front window
			log "AS: @N: 'do script' returned missing value or errored, using front window."
		end if
	on error errMsg_class
		log "AS: Error in @N (new_terminal_entity class check): " & errMsg_class
		if (count windows) > 0 then
			set target_window to front window
		end if
	end try
	
	if target_window is not missing value then
		log "AS: Styling @N window for '{{escaped_device_label}}', ID: " & (id of target_window as text)
		tell target_window
			set custom title to "{{escaped_device_label}}"
			set background color to {{aps_bg_color}}
			set normal text color to {{aps_text_color}}
			set cursor color to {{aps_text_color}}
			set bold text color to {{aps_text_color}}
			set index to 1
		end tell
	else
		log "AS: @N: target_window could not be determined for styling."
	end if
end tell